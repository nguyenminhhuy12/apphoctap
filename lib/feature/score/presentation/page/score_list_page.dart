import 'package:flutter/material.dart';

import '../../data/data/score_remote_datasource.dart';
import '../../domain/entities/score.dart';
import '../../data/repositories/score_repository_impl.dart';

import '../../domain/usecases/create_score.dart';
import '../../domain/usecases/get_all_score.dart';
import '../../domain/usecases/get_score.dart';

class ScoreListPage extends StatefulWidget {
  const ScoreListPage({super.key});

  @override
  State<ScoreListPage> createState() => ScoreListPageState();
}

class ScoreListPageState extends State<ScoreListPage> {  
  // C√°c l·ªõp "UseCase" ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi t·∫ßng Domain v√† Data

  // T·∫ßng datasource ‚Äì truy xu·∫•t d·ªØ li·ªáu Firestore
  late final _remote = ScoreRemoteDatasourceImpl();

  // Repository: ƒë√≥ng vai tr√≤ trung gian gi·ªØa datasource v√† usecase
  late final _repo = ScoreRepositoryImpl(_remote);

  // C√°c use case t∆∞∆°ng ·ª©ng v·ªõi c√°c h√†nh ƒë·ªông CRUD
  late final _getAllScores = GetAllScore(_repo);
 
  late final _getScoreById = GetScore(_repo);

  // Controller cho √¥ t√¨m ki·∫øm
  final TextEditingController _searchCtrl = TextEditingController();

  // Bi·∫øn l∆∞u chu·ªói t√¨m ki·∫øm
  String _searchQuery = '';

  // Danh s√°ch sinh vi√™n ƒë∆∞·ª£c l·ªçc theo t·ª´ kh√≥a
  List<Score> _filteredScore = [];

  // Danh s√°ch t·∫•t c·∫£ sinh vi√™n l·∫•y t·ª´ Firestore
  List<Score> _scores = [];

  // H√†m kh·ªüi t·∫°o state ban ƒë·∫ßu
  @override
  void initState() {
    super.initState();
    _initAuth();
  }


  Future<void> _initAuth() async {
    await _loadScores();
  }

  Future<void> _loadScores() async {
    final scores = await _getAllScores();
    setState(() {
      _scores = scores;
      _filteredScore = scores; 
    });
  }

  // üîç T√¨m sinh vi√™n theo ID (d√πng khi mu·ªën t√¨m b·∫±ng m√£)
  Future<void> _searchScore() async {
    final id = _searchCtrl.text.trim();
    if (id.isEmpty) {
      // N·∫øu ƒë·ªÉ tr·ªëng, load l·∫°i t·∫•t c·∫£ sinh vi√™n
      await _loadScores();
      return;
    }

    try {
      // G·ªçi usecase l·∫•y sinh vi√™n theo ID
      final score = await _getScoreById(id);
      setState(() => _scores = [score]);
    } catch (e) {
      // N·∫øu kh√¥ng t√¨m th·∫•y, x√≥a danh s√°ch v√† hi·ªÉn th·ªã th√¥ng b√°o
      setState(() => _scores = []);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Kh√¥ng t√¨m th·∫•y sinh vi√™n!')),
      );
    }
  }
// void _sortByYear() {
//   setState(() {
//     _Scores.sort((a, b) => b.year.compareTo(a.year));
//     _filteredScore.sort((a, b) => b.year.compareTo(a.year));
//   });
// }
  

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Thanh AppBar ph√≠a tr√™n
      appBar: AppBar(
        title: const Text('Score List'),
        actions: [
          // N√∫t refresh ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadScores,
          ),
        ],

        // Ph·∫ßn d∆∞·ªõi AppBar ‚Äì √¥ t√¨m ki·∫øm (PreferredSize cho ph√©p th√™m widget d∆∞·ªõi AppBar)
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(60),
          child: Padding(
            padding: const EdgeInsets.all(8),
            child: TextField(
              decoration: InputDecoration(
                hintText: 'T√¨m theo t√™n b√†i h√°t...',
                prefixIcon: const Icon(Icons.search),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              onChanged: (value) {
                setState(() {
                  _searchQuery = value.toLowerCase();
                  _filteredScore = _scores.where((s) {
                    return s.taskname.toLowerCase().contains(_searchQuery);
                  }).toList();
                 // _sortByYear();
                });
              },
            ),
          ),
        ),
      ),

      // Ph·∫ßn th√¢n hi·ªÉn th·ªã danh s√°ch sinh vi√™n
      body: _filteredScore.isEmpty
          ? const Center(child: Text('No Scores found.'))
          : ListView.builder(
              itemCount: _filteredScore.length,
              itemBuilder: (context, index) {
                final c = _filteredScore[index];
                return ListTile(
                  // Avatar tr√≤n c√≥ k√Ω t·ª± ƒë·∫ßu c·ªßa t√™n sinh vi√™n
                  leading: CircleAvatar(
                    child: Text(c.taskname[0].toUpperCase()),
                  ),
                  // Hi·ªÉn th·ªã th√¥ng tin ch√≠nh
                  title: Text(c.taskname),
                  subtitle: Text(
                    'T√™n b√†i ktra: ${c.taskname}\ndiem so: ${c.score}\nso lan lam: ${c.times}',
                  ),
                  isThreeLine: true,
                  // C√°c n√∫t ch·ª©c nƒÉng b√™n ph·∫£i (s·ª≠a / x√≥a)
                );
              },
            ),
    );
  }
}
